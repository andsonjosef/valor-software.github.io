{
  "author": "Ludmila Nesvitiy",
  "domains": [
    "dev_quality_assurance"
  ],
  "authorImg": "https://assets.website-files.com/5c4c30d0c49ea6746fafc90c/5f69eabbb804c9c13508347a_nesvitiy.jpg",
  "language": "en",
  "bgImg": "https://assets.website-files.com/5c4c30d0c49ea6746fafc90c/5f69eb8d290981334341012c_art-11.jpeg",
  "title": "Case study of Applitools or not only Cypress cross-browser testing",
  "position": "QA Automation Engineer",
  "date": "Mon Apr 08 2019 10:50:04 GMT+0000 (Coordinated Universal Time)",
  "content": "<div class=\"max-w-full\">\n    <p>The world of testing is moving further and deeper towards automated tests. Naturally, more and more new tools and\n        approaches are emerging. To keep up with innovation and at the same time understand which of the approaches or\n        tools are best suited precisely in this situation, you need to continually experiment, try new applications,\n        libraries, and technologies.</p>\n    <p>As a testing engineer in the automation field, I understand that most functional testing types could and should\n        be automated. But what about non-functional? UI testing, pixel-perfect, usability testing - can also be\n        automated. Surprised? Then this article is for you, because it's a story about automated testing of the\n        graphic user interface, including pixel-perfect and cross-browser Cypress testing, using <a\n                href=\"https://applitools.com/\"\n                data-rt-link-type=\"external\">Applitools</a>.<br></p>\n    <p>According to official documentation, Applitools is a multi-functional application that provides a lot of\n        interesting features for test engineers, developers, product owners, managers, etc. We wanted to implement just\n        a few of the provided features to our <a href=\"https://valor-software.com/ngx-bootstrap/#/\"\n                                                 data-rt-link-type=\"external\">ngx-bootstrap</a> library, specifically:\n    </p>\n    <ul>\n        <li>Screenshot comparisons using artificial intelligence</li>\n        <li>Applitools dashboard for managing snapshot tests</li>\n        <li>Cross-browser and cross-device testing for already implemented Cypress tests.</li>\n    </ul>\n    <p>All tasks above are interdependent on each other and therefore should be done at one time. On a side note: we're\n        implying that Cypress is already installed and that all functionality is covered by e2e-Cypress tests. If you\n        need help with the basic setup and configuration of Cypress, we advice to follow the <a\n                href=\"https://docs.cypress.io/guides/getting-started/installing-cypress.html\"\n                data-rt-link-type=\"external\">official Getting Started article.</a> To keep things straight, let's move\n        through all steps and set up the Applitools plugin for Cypress:</p><h4>Set up Applitools Eyes</h4>\n    <p>We already had a large scope of Cypress tests, so they just needed several additions:</p>\n    <ol>\n        <li>Add the Applitools plugin to the <em>cypress/plugins/index.js</em> file by specifying\n            <strong>eyes.cypress</strong> module:\n        </li>\n    </ol>\n    <pre>\n        <code>\n            ~~~%javascript%\nrequire('@applitools/eyes.cypress')(module);\n~~~\n        </code>\n    </pre>\n\n    <ol start=\"2\n    \">\n        <li>Import all possible Applitools commands to the <em>cypress/support/index.js</em> file:</li>\n    </ol>\n\n    <pre>\n        <code>\n            ~~~%javascript%\nimport './commands'\n~~~\n        </code>\n    </pre>\n    <p><strong>Note </strong>In the basic setup, you can do steps #1 and #2 by just running `<em>npx eyes-setup</em>`\n        after installing the Eyes Cypress npm package.<br></p>\n    <ol start=\"3\n    \">\n        <li>Add Applitools eyes as an additional library to the dependencies and run <strong><em>npm i</em></strong>\n            command\n            in the terminal:\n        </li>\n    </ol>\n    <pre>\n        <code>\n            ~~~%javascript%\n\"@applitools/eyes.cypress\": \"3.4.2\"\n~~~\n        </code>\n    </pre>\n    <ol start=\"4\n    \">\n        <li>Add the appropriate command to the package.json in the src folder (we'll explain what it does, don't be\n            scared):\n        </li>\n    </ol>\n    <pre>\n        <code>\n            ~~~%json%\n\"cy:run:snapshot\": \"APPLITOOLS_SHOW_LOGS=1 APPLITOOLS_CONCURRENCY=100 cypress run --config integrationFolder=cypress/snapshot\"\n~~~\n        </code>\n    </pre>\n    <ul>\n        <li>APPLITOOLS_SHOW_LOGS=1 - throws additional logs to the console (can be helpful when you need to investigate\n            the reason for failures locally and on the CI).\n        </li>\n        <li>APPLITOOLS_CONCURRENCY=100 - specifies the amount of available concurrent sessions in your price plan.\n            <strong>Note</strong> Default value is 0.\n        </li>\n        <li>--config integrationFolder=cypress/snapshot - makes Cypress run only snapshot tests in this scope.</li>\n    </ul>\n    <p>If you want to run Cypress tests without Applitools and you don't want to get any warnings from Applitools such\n        as in the image below, add the APPLITOOLS_CONCURRENCY=100 parameter to the appropriate Cypress command.</p>\n    <blockquote><strong>Important notice:</strong> the default behavior for free accounts is that the Applitools visual\n        tests are run with a concurrency value of 1. This means that the visual tests don't run in parallel, and\n        therefore are slower.<br>If your account does support a higher level of concurrency, it's possible to pass a\n        different value by specifying `concurrency:X` in the applitools.config.js file.<br>Check<a\n                href=\"https://www.npmjs.com/package/@applitools/eyes.cypress#concurrency\"\n                data-rt-link-type=\"external\"> more information on how to configure the concurrency level</a>.<br>If you\n        are\n        interested in speeding up your visual tests, contact <a href=\"http://sdr@applitools.com/\"\n                                                                data-rt-link-type=\"external\">sdr@applitools.com</a> to\n        get a trial account and a higher level of concurrency.\n    </blockquote>\n    <h4>Write your test for visual testing</h4>\n    <p>To begin with, let's look how the <a\n            href=\"https://github.com/valor-software/ngx-bootstrap/blob/development/cypress/snapshot/snapshot_spec.js\"\n            data-rt-link-type=\"external\">fully functional test</a> looks like:</p>\n\n    <pre>\n        <code>\n            ~~~%javascript%\nimport &#123; DatepickerPo } from '../support/datepicker.po';\nimport &#123; DropdownsPo } from '../support/dropdowns.po';\nimport &#123; ModalsPo } from '../support/modals.po';\nimport &#123; TabsPo } from '../support/tabs.po';\nimport &#123; TypeaheadPo } from '../support/typeahead.po';\n        </code>\n    </pre>\n\n    <pre>\n        <code>\n            describe('Snapshot test', () => &#123;\n            const componentsArray = [\n              new DatepickerPo(),\n              new DropdownsPo(),\n              new ModalsPo(),\n              new TypeaheadPo(),\n              new TabsPo()\n            ];\n            componentsArray.forEach(page => &#123;\n\u200D\n   it(`navigate to each Demo and check example: $&#123;page.pageUrl}`, () => &#123;\n            page.navigateTo();\n            cy.get('ng-sample-box').each(demo => &#123;\n       const subtitle = demo.parent().find('h3').text();\n       cy.wrap(demo).find(`.bd-example`)\n         .eyesOpen(&#123;\n            appName: 'NGX-bootstrap',\n            concurrency: 5,\n            matchLevel: 'Strict',\n            testName: `$&#123;page.pageUrl} - $&#123;subtitle}`,\n           browser: [&#123;\n             name: 'chrome',\n             width: 360,\n             height: 640\n           }, &#123;\n             name: 'firefox',\n             width: 360,\n             height: 640\n           },\n             &#123;\n             name: 'firefox',\n             width: 1366,\n             height: 768\n           }]\n         })\n         .eyesCheckWindow(&#123;\n            sizeMode: 'selector',\n            selector: `.bd-example`,\n            tag: `$&#123;page.pageUrl}-$&#123;subtitle}`,\n           sendDom: false,\n         })\n         .eyesClose();\n     });\n   });\n });\n});\n~~~\n        </code>\n    </pre>\n\n\n    <p>Let's analyze it step by step because it's much code to grasp at one sitting.</p>\n    <p>Firstly, we need to declare an array of objects. Each Page Object has its unique URL for navigation and the set\n        of methods for our test.</p>\n\n    <pre>\n        <code>\n            ~~~%javascript%\nconst componentsArray = [\nnew DatepickerPo(),\nnew DropdownsPo(),\nnew TabsPo()\n];\n~~~\n        </code>\n    </pre>\n    <p>Take each object using forEach loop.</p>\n    <pre>\n        <code>\n            ~~~%javascript%\ncomponentsArray.forEach(page =>\n~~~\n        </code>\n    </pre>\n    <p>Invoke URL name, which will make a descriptive test name and tell you what the name of the current testing page\n        is.</p>\n    <pre>\n        <code>\n            ~~~%javascript%\nit('navigate to each Demo and check example: $&#123;page.pageUrl}', () => &#123;\n            ~~~\n                    </code>\n                </pre>\n\n    <p>Navigate to a page to start testing:</p>\n    <pre>\n                <code>\n                ~~~%javascript%\npage.navigateTo();\n~~~\n                </code>\n                </pre>\n\n    <p>Method navigateTo() is implemented using <em>cy.visit </em>command, which will take our pageUrl, add it to\n        baseUrl, and form an appropriate URL to navigate.</p>\n    <pre>\n<code>\n~~~%javascript%\nnavigateTo() &#123;\nconst bsVersionRoute = Cypress.env('bsVersion') ? `?_bsVersion=bs$&#123;Cypress.env('bsVersion')}` : '';\ncy.visit(`$&#123; this.pageUrl }$&#123;bsVersionRoute}`);\n}\n~~~\n</code>\n</pre>\n    <p>Okay, but what is <em>bsVersionRoute</em> doing there? This is just a specification of the testing process for\n        the ngx-bootstrap library, due to the extended range of supported Bootstrap versions.</p>\n    <p><em>bsVersionRoute</em> parameter will tell Cypress which bootstrap version should be tested:</p>\n    <ul>\n        <li><a href=\"https://valor-software.com/ngx-bootstrap/#/datepicker\" data-rt-link-type=\"external\">Bootstrap 4</a>\n            version (default one)\n        </li>\n        <li><a href=\"https://valor-software.com/ngx-bootstrap/#/datepicker?_bsVersion=bs3\" data-rt-link-type=\"external\">Bootstrap\n            3</a> version\n        </li>\n    </ul>\n    <p>Find each demo snippet, which consists of the demo component itself and two tabs with additional info:</p>\n    <pre>\n<code>\n~~~%javascript%\ncy.get('ng-sample-box').each(demo => &#123;\n~~~\n</code>\n</pre>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\n    \" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1242px\" style=\"max-width:1242px\">\n        <div><img\n                src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5cab2e647177dc01b8d79c43_IaNO13CuCwBG6QvLn0cpMlOwcVqfi9TXLk_OMRojE1FGHdA2Ir-A8DqxNNJ08Qc3-mVo5mboraTgc6rffkffQm6F3yeFrd3BfshS7V04zrzoGYUnmpUofvrKpE5MYhWqRtPxhwi8.png\"\n                alt=\"Bootstrap example \">\n        </div>\n    </figure>\n    <p>Now we can define the sub-title of each Demo, which we'll test. Let's turn to the parent of the\n        component that we've found and find 'h3' header there.</p>\n\n    <pre>\n        <code>\n            ~~~%javascript%\nconst subtitle = demo.parent().find('h3').text();\n~~~\n        </code>\n    </pre>\n\n    <p>The <em>ng-sample-box</em> component contains a template and component source. In our test, we don't need any\n        information from tabs, so we'll work solely with the .bd-example class.</p>\n    <pre>\n        <code>\n            ~~~%javascript%\ncy.wrap(demo).find(`.bd-example`)\n~~~\n        </code>\n    </pre>\n    <p>Oooh! Now we can open Applitools eyes and begin \"staring\"at our demo. Remember we said that these tasks are\n        interdependent at the beginning of an article? Here we can also define the settings for our next task, in which\n        we want to see the results on the Applitools Dashboard:</p>\n\n    <pre>\n        <code>\n            ~~~%javascript%\neyesOpen(&#123;\n            appName: 'NGX-bootstrap',\n            matchLevel: 'Strict',\n            testName: `$&#123;page.pageUrl} - $&#123;subtitle}`,\n~~~\n        </code>\n    </pre>\n    <!--    <h6>~~~%javascript%</h6><h6>eyesOpen(&#123;-->\n\n    <p>1. <strong>appName,</strong> as the name suggests, is an application name that'll be shown on the Dashboard in\n        \"Apps &amp Tests\" menu. Also, we'll group all our test results according to this parameter.</p>\n    <p>2. <strong>matchLevel</strong> parameter sets the level of image comparison. The default match level is\n        \"Strict\". If you would like to use a different match level, you should specify it right here.</p>\n    <p>Some other comparison levels:</p>\n    <ul>\n        <li><strong>Exact</strong> - pixel to pixel comparison.</li>\n        <li><strong>Strict</strong> - comparison for everything, what the user can visually detect, including content\n            and color.\n        </li>\n        <li><strong>Content</strong> - same as Strict, but without color comparison.</li>\n        <li><strong>Layout</strong> - compares elements structure.</li>\n    </ul>\n    <p>If that's not enough, you can get more information about the <em>matchLevel</em> parameter at <a\n            href=\"https://help.applitools.com/hc/en-us/articles/360007188591-Match-Levels\" data-rt-link-type=\"external\">official\n        Applitoos blog</a>.</p>\n    <p>3. <strong>testName</strong> parameter helps you understand which tests failed and what functionality you should\n        recheck or fix. You'll see this info in the Applitools Dashboard according to our configuration:<br></p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\" data-rt-type=\"image\"\n            data-rt-align=\"fullwidth\" data-rt-max-width=\"557px\" style=\"max-width:557px\">\n        <div><img src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5cab32d43be192e8aa80ebec_ATDeleG.png\"\n                  alt=\"image7\"></div>\n    </figure>\n    <p>Also, let's not forget about cross-browser testing, so be sure to indicate the browsers:</p>\n\n    <pre>\n                <code>\n                    ~~~%javascript%\nbrowser: [&#123;\n                    name: 'chrome',\n                    width: 360,\n                    height: 640\n}, &#123;\n                    name: 'firefox',\n                    width: 1366,\n                    height: 768\n}]\n~~~\n                </code>\n            </pre>\n\n    <p>To be clear, as of now, the Applitools plugin provides the possibility to test in Firefox, Chrome, IE, Edge. In\n        the nearest future, Safari and many other browsers are going to be supported. In the meantime, you can already\n        set different screen resolutions using width and height settings.</p>\n    <p>Now, when we're almost done, let Applitools know that we're ready to start testing:</p>\n    <pre>\n                <code>\n                    ~~~%javascript%\n.eyesCheckWindow(&#123;\n                    sizeMode: 'selector',\n                    selector: `.bd-example`,\n                    tag: `$&#123;page.pageUrl}-$&#123;subtitle}`,\n sendDom: false,\n})\n~~~\n                </code>\n            </pre>\n    <ul>\n        <li><strong>sizeMode </strong>parameter defines which part of our window will be checked. List of available\n            options: full-page, viewport, selector, region. You can find the official description of each option in the\n            <a href=\"https://github.com/applitools/eyes-cypress/blob/master/README.md#arguments-to-cyeyescheckwindow\"\n               data-rt-link-type=\"external\">appropriate section of official documentation</a>.\n        </li>\n        <li><strong>selector</strong> parameter will work only if you set the <em>sizeMode: 'selector.'</em> The value\n            should be a valid CSS-selector or XPath to an appropriate component/block/part which you want to test.\n        </li>\n        <li><strong>tag</strong> parameter groups test results by tag in the dashboard.</li>\n    </ul>\n    <p>Once our tests are finished, we need to tell Applitools about it:</p>\n    <pre>\n                <code>\n                    ~~~%javascript%\n.eyesClose();\n~~~\n                </code>\n            </pre>\n    <h4>Run our test and observe the results</h4>\n    <pre>\n                <code>\n                    ~~~%json%\nAPPLITOOLS_API_KEY=myKey npm run cy:run:snapshot\n~~~\n                </code>\n            </pre>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\n    \" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"939px\" style=\"max-width:939px\">\n        <div><img src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5cab3423f8e012b814e70c56_ECro61m.png\"\n                  alt=\"image5\">\n        </div>\n    </figure>\n    <p>Applitools Dashboard shows the baseline images (which will be taken at the first test run and will be\n        considered as a reference result) and images from the current test run.</p>\n    <p>If there are some differences, then the comparison logic, based on AI, will detect changes and show them to\n        you:<br></p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\n    \" data-rt-type=\"image\" data-rt-align=\"fullwidth\" data-rt-max-width=\"1266px\" style=\"max-width:1266px\">\n        <div><img src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5cab34427177dceb5bd7b918_YYUXA9z.png\"\n                  alt=\"image2\">\n        </div>\n    </figure>\n    <p>If we want to update our baseline images, we need to go to the Dashboard and accept the differences\n        which were found during the latest test run. This helps you keep the latest reference images versions\n        up-to-date.</p><h4>Summary</h4>\n    <p>We've implemented <strong>cross-browser</strong> and <strong>cross-device</strong> testing for our demo\n        application, using our default testing library (Cypress) with the additional Applitools plugin. Now we can be\n        sure that each part of our UI works properly. Okay, but everything couldn't be that good and painless, could it?\n        Let's take a look at some of the pros and cons:</p><h5>PROS</h5>\n    <ul>\n        <li>Easy to set up, short time for implementation</li>\n        <li>AI-powered image comparison technology</li>\n        <li>A wide spectrum of available settings for image comparison</li>\n        <li>Possibility to manage reference images in the dashboard</li>\n        <li>Great test result management: find them, group them, remove, etc.</li>\n        <li>Responsive support team, who took all our wishes into account.</li>\n    </ul>\n    <h5>CONS</h5>\n    <ul>\n        <li>Not as many browsers available for testing as we would like (BUT, while our article was passing through\n            several levels of verification, the Applitools development team has already made support for IE and Edge and\n            will soon have Safari as well).\n        </li>\n        <li>TypeScript support is coming soon. Check the <a href=\"https://applitools.com/tutorials\"\n                                                            data-rt-link-type=\"external\">list of tutorials</a>, maybe it\n            already exists.\n        </li>\n        <li>From time to time, error logs in the console aren't that descriptive.</li>\n    </ul>\n    <h4>Afterwords</h4>\n    <p>A big THANK YOU to <a href=\"https://applitools.com/\" data-rt-link-type=\"external\">Applitools</a> and <a\n            href=\"https://www.thisdot.co/\" data-rt-link-type=\"external\">This Dot Labs</a> teams for their ongoing\n        support during our testing journey and for providing the possibility to test all this out. It was a blast!<br>\n    </p>\n</div>"
}