{
  "author": "Ludmila Nesvitiy",
  "domains": [
    "dev_quality_assurance"
  ],
  "authorImg": "https://assets.website-files.com/5c4c30d0c49ea6746fafc90c/5f69eabbb804c9c13508347a_nesvitiy.jpg",
  "language": "en",
  "bgImg": "https://assets.website-files.com/5c4c30d0c49ea6746fafc90c/5cadcf20a10ee1f986d98a29_canvas.png",
  "title": "Testing Canvas could be easier",
  "position": "QA Automation Engineer",
  "date": "Tue Apr 16 2019 11:17:20 GMT+0000 (Coordinated Universal Time)",
  "content": "<div class=\"max-w-full\">\n    <p>At Valor Software, we, with the help of generous contributors, developed a set of open source projects, that\n        allow developers to build apps quicker and more qualitative. This should be helpful for other software\n        development companies, yeah. Also, we put a lot of effort into experimenting with automated testing to make sure\n        that those libraries work properly. That's why now we'll take a deep dive into our next experiment: testing\n        &ltcanvas&gt HTML elements.</p><h4>Project description</h4>\n    <p>ng2-charts is a small library that contains Angular directives and provides the possibility to integrate a number\n        of types of charts: line, bar, radar, pie, polarArea, doughnut, bubble, and scatter.</p><h4>Source data</h4>\n    <p>There are no UI/E2E tests at all. We only have a small number of unit tests out there.</p><h4>Goal</h4>\n    <p>Quickly create the scope of UI or E2E tests to check basic charts on the Demo site.</p><h4>Problems</h4>\n    <p>Creating scope of tests for Demo site might not seem like a complex task, because <a href=\"https://valor-software.com/ng2-charts/\"\n        data-rt-link-type=\"external\">Demo site</a> contains only a few pages, but let's look a b-i-it deeper:</p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\n    \"data-rt-type=\"image\"data-rt-align=\"fullwidth\"data-rt-max-width=\"1261px\"style=\"max-width:1261px\">\n    <div><img alt=\"image6\"\n        src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5cac9625b32e397fc8d542c3_VhINC-U1hfiJ6IpgLQk_y7PCGNprGcBeGOps1QdrRi2TaALTEDcLWwdRyMmZF0DrB4L6KlfESRBtvsfb-ui52gTxDT_B1fP9jwAtzM_748d75ZK2DfTpVazZicu1h5flRfmWzpGF.png\">\n    </div>\n    </figure><p>Well, we have a single HTML element, which consists of graphic elements, and yeah it's the &ltcanvas&gt\n    .<br>FYI, according to MDN:</p>\n    <blockquote>&ltcanvas&gt is an HTML element which can be used to draw graphics via scripting (usually JavaScript).\n        This can, for instance, be used to draw graphs, combine photos, or create simple (and not so simple)\n        animations...\n    </blockquote>\n    <p>That means we can interact with elements using nothing but an imitation of mouse actions. Since our goal is to\n        check for the standard basic functionality, image comparison should be enough.</p><h4>Implementation step 1.\n    Testing main page with Cypress</h4>\n    <pre>\n        <code>\n            ~~~%javascript%\ndescribe('Main Page', () => &#123;\n            it(`navigate to main Demo page and check info`, () => &#123;\n  const topBarSelector = 'mat-toolbar';\n  const mainContentSelector = 'main';\n  cy.visit('');\n  cy.get(topBarSelector).should('be.visible')\n    .eyesOpen(&#123;\n            appName: 'NG2-charts',\n            testName: `NG2-charts Main Page Top Bar`,\n            browser: browsers\n    })\n    .eyesCheckWindow(&#123;\n            sizeMode: 'selector',\n            selector: topBarSelector,\n            sendDom: false,\n    })\n    .eyesClose();\n  cy.get(mainContentSelector).should('be.visible')\n    .eyesOpen(&#123;\n            appName: 'NG2-charts',\n            testName: `NG2-charts Main Page Content`,\n            browser: browsers\n    })\n    .eyesCheckWindow(&#123;\n            sizeMode: 'selector',\n            selector: mainContentSelector,\n            sendDom: false,\n     })\n    .eyesClose();\n});\n});\n~~~\n        </code>\n    </pre>\n\n\n\n\n    <p>Now that the basic test which opens the page and checks two main elements to make sure their visible is ready, we\n        can move forward. Oops, here goes the first issue. When Cypress test runs and finishes, everything seems to be\n        okay. Our chart is visible. However, once we start going through the steps inside the Cypress browser, we'll\n        see space instead of our chart.</p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\n    \"data-rt-type=\"image\"data-rt-align=\"fullwidth\"data-rt-max-width=\"972px\"style=\"max-width:972px\">\n    <div><img src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5cac972bf94f986a6fd4a96d_RdepyyO.gif\"\n        alt=\"example gif\">\n    </div>\n    </figure><p><strong>It happens because of:</strong></p>\n    <p>Cypress takes snapshots as your tests run. To see exactly what happened at each step (according to official\n        Cypress documentation), you have to hover over commands in the Command Log.</p>\n    <p>The same behavior can be seen on the Applitools screenshots:<strong><br></strong></p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\n    \"data-rt-type=\"image\"data-rt-align=\"fullwidth\"data-rt-max-width=\"1816px\"style=\"max-width:1816px\">\n    <div><img src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5cac976c51b2296b29aec8aa_3WWv2qk.png\"\n        alt=\"image4\">\n    </div>\n    </figure><h4>Implementation step 2. Making real .png screenshots</h4>\n    <p>Instead of snapshots, we decided to make real .png screenshots and save them for later comparison with the\n        reference images. With Cypress it's easy as 1-2-3:</p>\n\n    <pre>\n        <code>\n            ~~~%javascript%\ndescribe('Charts', () => &#123;\n            const componentsArray = [\n                &#123;url: '/#LineChart', selector: 'app-line-chart'},\n                &#123;url: '/#BarChart', selector: 'app-bar-chart'},\n                &#123;url: '/#DoughnutChart', selector: 'app-doughnut-chart'},\n  &#123;url: '/#RadarChart', selector: 'app-radar-chart'},\n  ];\ncomponentsArray.forEach(component => &#123;\n  it(`$&#123;component.url}`, () => &#123;\n            cy.visit(component.url);\n            cy.get(component.selector).find('canvas').screenshot();\n  });\n});\n});\n~~~\n        </code>\n    </pre>\n\n\n    <p>We want to compare screenshots of charts only -  the rest of the information can be covered by other types of\n        more \"stable\"UI tests. That's why we need to find the expected &ltcanvas&gt element and only then take a\n        screenshot. By default, these screenshots will be saved to <em>cypress/screenshots/testName/describeName --\n            ItName.png</em>. According to our example above, we'll have four images with unique names.</p><h4>\n    Implementation step 3. Comparing screenshots</h4>\n    <p>There are a lot of <a href=\"https://applitools.com/tutorials\"data-rt-link-type=\"external\">Applitools\n        SDKs</a> out there, and the one that suits our needs is \"<a href=\"https://applitools.com/tutorials/selenium-javascript.html\"\n        data-rt-link-type=\"external\">Applitools Eyes Javascript SDK</a>.\"This library provides us with the\n        possibility to compare real images, work with them on the <a href=\"https://applitools.com/blog/getting-started-with-applitools-eyes-test-manager\"\n        data-rt-link-type=\"external\">Applitools Dashboard</a> service without much of a hassle. Everything that is\n        needed from us is to set an API key, choose an appropriate OS and hostingApp, and, of course, provide real\n        images:</p>\n    <pre>\n        <code>\n            ~~~%javascript%\nvar Eyes = require('eyes.images').Eyes;\nconst fs = require('fs');\nconst urls = [\"#LineChart\", \"#BarChart\", \"#DoughnutChart\", \"#RadarChart\"];\nvar eyes = new Eyes();\neyes.setApiKey(YourAPIKeyâ€™);\neyes.setHostingApp(\"Chrome\");\neyes.setHostOS('MacOS latest');\n\nasync function forEachAsync(array, callback) &#123;\n            let i = 0;\n            for (; i < array.length; i++) &#123;\n  await callback(array[i], i, array);\n}\n}\nconst testResults = eyes.open(\"NG2-charts\", \"Charts comparison\", &#123;width: 1366, height: 768}).then(async function () &#123;\n            return forEachAsync(urls, async (url) => &#123;\n  const image = fs.readFileSync(`./cypress/screenshots/main-test.js/Charts -- $&#123;url}.png`);\n  await eyes.checkImage(image, url);\n});\n}).then(function () &#123;\n            return eyes.close();\n});\ntestResults.then(function (results) &#123;\n            console.log(\"Results: \", results);\n});\n~~~\n        </code>\n    </pre>\n\n\n    <p>That's it! We've achieved our goal in no time and have stable and fully functional tests for quick demo\n        check.</p><h4>Yeah, well, but where's the proof?</h4>\n    <p>All needed settings for chosen libraries and all tests can be found in ng2-charts <a href=\"https://github.com/valor-software/ng2-charts/pull/1072/files\"\n        data-rt-link-type=\"external\">Valor Software repo in the appropriate PR</a>.</p>\n    <p>If you still don't believe us, here's how Applitools Dashboard looks like:<br></p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-fullwidth\n    \"data-rt-type=\"image\"data-rt-align=\"fullwidth\"data-rt-max-width=\"1676px\"style=\"max-width:1676px\">\n    <div><img src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/5cac986cf94f9810c4d4ac0c_nRUcQAt.png\"\n        alt=\"image3\">\n    </div>\n    </figure><p>...one more thing! Travis CI log, which will be created at each CI test run, can be found on <a href=\"\n                                                                                                                https://travis-ci.org/valor-software/ng2-charts/builds/507755903?utm_source=github_status&utm_medium=notification\"\n    data-rt-link-type=\"external\">Valor Software Travis Dashboard</a>.</p>\n    <p><strong>Good news!</strong> According to the <a href=\"https://applitools.com/\"\n        data-rt-link-type=\"external\">Applitools</a> development team, they currently don't support <em>canvas</em>\n        elements in the Cypress plugin. However, they will support them in the future - this will make the whole testing\n        process of <em>canvas</em> elements much easier.</p>\n</div>"
}