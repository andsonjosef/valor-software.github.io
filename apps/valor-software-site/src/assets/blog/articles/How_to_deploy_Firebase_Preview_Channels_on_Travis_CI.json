{
  "title": "How to deploy Firebase Preview Channels on Travis CI",
  "domains": "['business_analysis', 'user_research_design', 'devops_cloud']",
  "language": "en",
  "bgImg": "https://assets.website-files.com/5c4c30d0c49ea6746fafc90c/60eeac94c338b9c4039ad1c7_Blog.Cover.png",
  "author": "Nikita Glukhi",
  "position": "JS Developer",
  "date": "Mon Jul 12 2021 11:06:08 GMT+0000 (Coordinated Universal Time)",
  "content": "<div>\n    <p>\n        Firebase has released the long awaited Preview channel functionality, which allows for the testing of updates. All Firebase (not Firestore!) users can benefit from this hosting feature. And you may be asking what about Travis CI or other hosting users? Can they use preview channels as well?<br>\n    </p>\n    <p>\n        At the time of this article's publication, GitHub Actions does not yet natively provide automated procedures for Travis CI from GitHub. Below is a solution to use preview channels by Firebase with your existing <a href=\"https://travis-ci.org/\" target=\"_blank\">Travis CI</a> deployment environment.\n    </p>\n    <h3>\n        Check updates with no risk for users' experience\n    </h3>\n    <p>\n        Let's face the truth, to check the behavior of your polished and tested updates on production, you had to actually push them to production. Then, in case something fails, - get back to a previous version. Application users might have noticed inappropriate system behavior, which is a pity. To get rid of this kind of working situation, we can now use preview channels. Apply this new Firebase feature to automatically deploy updates and see how they behave, with no risk for real users' experience. Also, you can comfortably leave comments for your updates, and amend them with your team. The best thing is that this temporary storage will remove itself after a preview channel link expires. No storage place taken!\n    </p>\n    <h3>\n        Prerequisites:<br>\n    </h3>\n    <ol>\n        <li>You need to know Travis CI and have experience with the config file.</li>\n        <li>You need to know how to write Bash scripts and know the right stage to run the Bash script for preview channels.<br></li>\n    </ol>\n    <h3><strong>Steps to reproduce:</strong></h3>\n    <ol>\n        <li>Create a new local repository.</li>\n        <li>Create a new GitHub repository.</li>\n        <li>Run 'git remote add' command to connect your local repository to GitHub repository.</li>\n        <li><a href=\"https://firebase.google.com/docs/web/setup\" target=\"_blank\">Set up Firebase</a> project.</li>\n        <li><a href=\"https://docs.travis-ci.com/user/tutorial/#to-get-started-with-travis-ci-using-github\" target=\"_blank\">Set up Travis CI</a> for GitHub repository.</li>\n    </ol>\n    <p>\n        Set up configuration variables - add<a href=\"https://docs.travis-ci.com/user/environment-variables/\" target=\"_blank\"><strong>environment variables in Travis CI</strong></a>.&nbsp  The variables that you need to set up are the two access tokens to work with Firebase and GitHub:<br>\n    </p>\n    <ul>\n        <li>To get FIREBASE_TOKEN, use the command: firebase login:ci</li>\n    </ul>\n    <p>\n        If the command doesn't work, that's probably because you don't have firebase-tools\n    </p>\n    <p>\n        installed. For installation, run the following command: npm i -g firebase-tools, or curl -sL<a href=\"https://firebase.tools/\" target=\"_blank\"> https://firebase.tools</a> | bash\n    </p>\n    <p>\n        Then - run a firebase login command, then - firebase login:ci. The latter command gives you a Firebase access token that you want to use as a value for this step (To get FIREBASE_TOKEN...).&nbsp <br>\n    </p>\n    <ul>\n        <li>Get GITHUB_TOKEN using this link: <a href=\"https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token\" target=\"_blank\">Creating a personal access token</a></li>\n    </ul>\n    <p>\n        Then, apply this value for the GITHUB_TOKEN variable.&nbsp <br>\n    </p>\n    <ol start=\"6\">\n        <li>In your local repository, run the 'firebase init hosting' command, choose your Firebase project from the list of already existed projects, and <a href=\"https://firebase.google.com/docs/hosting/full-config\" target=\"_blank\">configure firebase.json file.</a></li>\n        <li>Create .travis.yml file in your local repository.</li>\n        <li>Create a Bash script - <a href=\"https://devdocs.io/bash/\" target=\"_blank\">https://devdocs.io/bash/.</a></li>\n        <li>Add job to .travis.yml file that should call the script that we've created as the step 8.</li>\n    </ol>\n    <p>\n        The job you need to insert into .travis.yml file:\n    </p>\n    <pre>\n            stages:\n - name: \"Deploy to Firebase preview channel\"\n   if: branch = master AND type = pull_request\n\njobs:\n include:\n - stage: \"Deploy to Firebase preview channel\"\n   skip_cleanup: true\n   provider: firebase\n   project: fir-project-dc47e\n   before_script:\n     - sudo apt-get install jq\n     - npm install firebase-tools -g\n     - npm run build:prod\n   script: bash deploy-to-firebase-preview-channels.sh\n        </pre>\n    <p>\n        Here fir-project-dc47e - an ID of your Firebase project<br>\n    </p>\n    <ol start=\"10\">\n        <li>Push changes to GitHub and create a pull request.</li>\n    </ol>\n    <p>\n        Now, back to solving our Travis CI issue and enabling its usage with the Preview channel Firebase functionality. Find the solution I came up with in the repository: <a href=\"https://github.com/NikitaGlukhi/travis-ci-and-firebase-preview-channels\" target=\"_blank\"><strong>Travis CI and Firebase preview channels solution.</strong></a>\n    </p>\n    <p>\n        Or a brief version on gist: <a href=\"https://gist.github.com/NikitaGlukhi/f094a6a8e6812d104d779e37d6560705\" target=\"_blank\"><strong>.travis.yml: preview channels deployment</strong>.</a><br>\n    </p>\n    <p>\n        I'll separate the script into pieces and describe every step below. To deploy successfully, please, follow my guidelines step by step.<br>\n    </p>\n    <p>\n        I start with a deployment to a preview channel:<br>\n    </p>\n    <pre>\n        #!/usr/bin/env bash\nDEPLOY_TO_PREVIEW_CHANNEL_RESULT=$(firebase hosting:channel:deploy pr-$TRAVIS_PULL_REQUEST --expires 30d --token $FIREBASE_TOKEN --json)\n    </pre>\n    <p>\n        After running the deploy command, I get a&nbsp  response with an object containing data, and I have the following as a result:<br>\n    </p>\n    <pre>\n        {{'{'}}\n        \"status\": \"success\",\n        \"result\": {{'{'}}\n        \"fir-project-dc47e\": {{'{'}}\n        \"site\": \"fir-project-dc47e\",\n        \"url\": \"https://fir-project-dc47e--pr-1-t36vykr3.web.app\",\n        \"expireTime\": \"2021-01-08T09:27:24.847798020Z\"\n        {{'}'}}\n        {{'}'}}\n        {{'}'}}\n    </pre>\n    <p>\n        Here fir-project-dc47e - an ID of your Firebase project<br>\n    </p>\n    <p>\n        I add this object to the DEPLOY_TO_PREVIEW_CHANNEL_RESULT variable. This object has a .result parameter containing all the data needed for future operations.<br>\n    </p>\n    <p>\n        Next, I select data from the .result parameter and add it to a separate variable that corresponds to the parameter name. This variable will contain an object with a key of ngx-bootstrap-demo.\n    </p>\n    <pre>\n        RESULT=`echo ${{'{'}}DEPLOY_TO_PREVIEW_CHANNEL_RESULT{{'}'}} | jq -r '.result'`\n    </pre>\n    <p>\n        For the next step, I extract fir-project-dc47e object from the RESULT variable:\n    </p>\n    <pre>\n        RESULT_DATA=`echo ${{'{'}}RESULT{{'}'}} | jq -r '.\"fir-project-dc47e\"'`\n    </pre>\n    <p>\n        The following goes to RESULT_DATA:\n    </p>\n    <pre>\n        {{'{'}}\n        \"site\": \"fir-project-dc47e\",\n        \"url\": \"https://fir-project-dc47e--pr-1-t36vykr3.web.app\",\n        \"expireTime\": \"2021-01-08T09:27:24.847798020Z\"\n        {{'}'}}\n    </pre>\n    <p>\n        Now, I extract a website name from the RESULT_DATA variable. The result will go to the SITE variable:<br>\n    </p>\n    <pre>\n        SITE=`echo ${{'{'}}RESULT_DATA{{'}'}} | jq -r '.\"site\"'`\n    </pre>\n    <p>\n        I extract a preview channel URL from RESULT_DATA variable, and the result goes to the URL variable:\n    </p>\n    <pre>\n        URL=`echo ${{'{'}}RESULT_DATA{{'}'}} | jq -r '.\"url\"'`\n    </pre>\n    <p>\n        Then - extracting data with the expiration time from the RESULT_DATA variable. And, I write it down to the EXPIRE_TIME_UTC variable. UTC format is a default one, so I bring it to the needed format which is GMT, in my case.<br>\n    </p>\n    <pre>\n        EXPIRE_TIME_UTC=`echo ${{'{'}}RESULT_DATA{{'}'}} | jq -r .expireTime`\nEXPIRE_TIME=$(TZ='GMT' date -d $EXPIRE_TIME_UTC +%c)\n    </pre>\n    <p>\n        The NEW_COMMENT variable creates a text with a project name, link to a preview channel, and its life duration. I'll add this text of the comment to a pull request later (TRAVIS_PULL_REQUEST/comments).<br>\n    </p>\n    <p>\n        Then, I extract all the comments from the pull request I want to work on, using the request to GitHub API. The result goes to the COMMENTS variable. The Objects array will have a description for each comment.\n    </p>\n    <pre>COMMENTS=$(curl -H \"Authorization: token $GITHUB_TOKEN\" -X GET \"https://api.github.com/repos/$TRAVIS_REPO_SLUG/issues/$TRAVIS_PULL_REQUEST/comments\")</pre>\n    <p>\n        I declare variables for test cycles. Using the SUBSTRING variable, I search for a comment that might have been added before to replace it with the latest one.\n    </p>\n    <p>\n        COMMENT_ID equals -1 by default. In the future, I'll assign a comment ID that I find to it. In case of no overlaps appeared, the value stays as default.<br>\n    </p>\n    <pre>\n        SUBSTRING=\"Project: fir-project-dc47e\"\nCOMMENT_ID=-1\n    </pre>\n    <p>\n        In this cycle, I sort out the COMMENTS array, and extract the body of each comment - its text, and search for a substring in this body. If an overlap is detected, I take the comment ID and assign it to the COMMENT_ID variable. If no overlaps are detected, then nothing is assigned, the loop just runs as before.<br>\n    </p>\n    <pre>\n        for row in $(echo \"${{'{'}}COMMENTS{{'}'}}\" | jq -r '.[] | @base64'); do\necho ${{'{'}}row{{'}'}}\n        _jq() {{'{'}}\n        echo ${{'{'}}row{{'}'}} | base64 --decode | jq -r ${{'{'}}1{{'}'}}\n        {{'}'}}\n        BODY=$(_jq '.body')\n  if [[ ${{'{'}}BODY{{'}'}} == *\"$SUBSTRING\"* ]]; then\n    COMMENT_ID=$(_jq '.id')\n  fi\ndone\n    </pre>\n    <p>\n        Finally, I run a COMMENT_ID test, if it equals 0 or is more than 0, it means a&nbsp  comment like this exists, and I need to refresh it. Then, I refer to GitHub API (GITHUB_TOKEN). If there's no comment - the command creates a new comment in a pull request (GitHub API, as well).\n    </p>\n    <pre>\n        if [[ ${{'{'}}COMMENT_ID{{'}'}} -ge 0 ]];\n then\n   curl -H \"Authorization: token $GITHUB_TOKEN\" -X PATCH -d \"{{'{'}}\\\"body\\\": \\\"$NEW_COMMENT\\\"{{'}'}}\" \"https://api.github.com/repos/${{'{'}}TRAVIS_REPO_SLUG{{'}'}}/issues/comments/${{'{'}}COMMENT_ID{{'}'}}\"\n else\n   curl -H \"Authorization: token $GITHUB_TOKEN\" -X POST -d \"{{'{'}}\\\"body\\\": \\\"$NEW_COMMENT\\\"{{'}'}}\" \"https://api.github.com/repos/${{'{'}}TRAVIS_REPO_SLUG{{'}'}}/issues/${{'{'}}TRAVIS_PULL_REQUEST{{'}'}}/comments\"\nfi\n    </pre>\n    <p>\n        As a result, I get the link with the comment to a preview channel. And, the comment we get from the previous operation comes from the person which token we use.<br>\n    </p>\n    <figure class=\"w-richtext-figure-type-image w-richtext-align-center\">\n        <div>\n            <img src=\"https://uploads-ssl.webflow.com/5c4c30d0c49ea6746fafc90c/60ec1e03db7c7b158aaa61f9_Fo06fCr0FS4nOMpv1cm_M5N0MmQuNTKNRJnnUnlegz87jJmLFwrK-FRZXA-R7ZAk0LfUuAWJpU1tviJ9P8iUy_FtGiXlDrp4Qgcq9oW9-u83GMMjgejrpt6rkPTHNNLWlG64wwkH.png\" width=\"auto\" height=\"auto\" loading=\"auto\">\n        </div>\n    </figure>\n    <h3>Any questions?</h3>\n    <p>\n        Feel free to contact me if you have any questions or troubles with deploying the script: <a href=\"mailto:nikita.glukhi@valor-software.com\">nikita.glukhi@valor-software.com.</a><br>\n    </p>\n    <h3><strong>Useful links:</strong></h3>\n    <p>\n        <a href=\"https://developer.github.com/v3/issues/comments/#list-issue-comments-for-a-repository\" target=\"_blank\">Issue Comments for a repository</a> - extract all the comments for a repository (as well as for a preview channel, but there's no example in the doc)\n    </p>\n    <p>\n        <a href=\"https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#create-an-issue-comment\" target=\"_blank\">Create an issue comment</a> - create a new comment\n    </p>\n    <p>\n        <a href=\"https://docs.github.com/en/free-pro-team@latest/rest/reference/issues#update-an-issue-comment\" target=\"_blank\">Update an issue comment</a> - refresh an existing comment\n    </p>\n</div>"
}